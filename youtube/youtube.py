import os
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from oauth2client.file import Storage
from oauth2client.client import flow_from_clientsecrets
from oauth2client.tools import run_flow
import argparse

# ---------------- CONFIG ---------------- #
if not os.path.exists("env"):
    os.makedirs("env")
CLIENT_SECRETS_FILE = "env/client_secret.json"  # download this from Google Cloud Console
TOKEN_STORAGE_FILE = "env/oauth2.json"
SCOPES = ["https://www.googleapis.com/auth/youtube.upload"]

# Title, Description, and Tags
DEFAULT_TITLE = "Daily Reddit AI Shorts #shorts"
DEFAULT_DESC = "Generated by my auto bot from Reddit trending"
DEFAULT_TAGS = ["reddit", "ai", "shorts", "automation", "funny"]
REDIRECT_URI = "http://localhost:8080"

# ---------------- AUTH ---------------- #

def get_authenticated_service():
    if not os.path.exists(CLIENT_SECRETS_FILE):
        print(f"‚ùå Client secrets file not found: {CLIENT_SECRETS_FILE}")
        return None
    flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE, scope=SCOPES)
    flow.redirect_uri = REDIRECT_URI
    storage = Storage(TOKEN_STORAGE_FILE)
    credentials = storage.get()
    flags = argparse.Namespace(
        noauth_local_webserver=False,
        logging_level='ERROR',
        auth_host_port=[8080, 8090],
        auth_host_name='localhost'
    )
    if not credentials or credentials.invalid:
        credentials = run_flow(flow, storage, flags)
    return build("youtube", "v3", credentials=credentials)

# ---------------- UPLOAD ---------------- #

def upload_video(video_name, title=DEFAULT_TITLE, desc=DEFAULT_DESC, tags=DEFAULT_TAGS):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_dir, "../output", video_name + ".mp4")
    print(f"üìπ Uploading {file_path}...")
    if not os.path.exists(file_path):
        print(f"‚ùå File {file_path} does not exist.")
        return
    youtube = get_authenticated_service()
    
    request_body = {
        "snippet": {
            "title": title,
            "description": desc,
            "tags": tags,
            "categoryId": "22",  # 'People & Blogs'
        },
        "status": {
            "privacyStatus": "public",  # can also be 'private' or 'unlisted'
        }
    }

    media_file = MediaFileUpload(file_path, mimetype="video/mp4", resumable=True)

    response = youtube.videos().insert(
        part="snippet,status",
        body=request_body,
        media_body=media_file
    ).execute()

    print(f"ü•∂ Upload complete: https://youtube.com/watch?v={response['id']}")
    return response

# ---------------- TEST ---------------- #

if __name__ == "__main__":
    # Replace this with the path to your generated video
    my_video = "test.mp4"
    upload_video(my_video, title="Test Video", desc="This is a test video", tags=["test", "video"])
